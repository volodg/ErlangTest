
<erl>
	out(Arg) ->
		Self = self(),
		Pid = spawn(fun() ->
				rec_loop( Arg#arg.clisock )
			end),
		[{header, {content_length, -1}},
			{streamcontent_from_pid, "text/plain", Pid}].

	rec_loop(Sock) ->
		io:fwrite( "start ok receive~n" ),
		receive
			{discard, YawsPid} ->
				yaws_api:stream_process_end(Sock, YawsPid);
			{ok, YawsPid} ->
				io:fwrite( "receive ok~n" ),
				bn_server:push(),
				rec_loop(Sock, YawsPid);
			Other ->
				io:fwrite( "receive One other: ~p~n", [ Other ] ),
				{ html, "error" }
		end,
		exit(normal).

	rec_loop( Sock, YawsPid ) ->
		io:fwrite( "start srv receive~n" ),
		receive
			{ report, Report } ->
				io:fwrite( "Receive report!!!: ~p~n", [ Report ] ),
				SendString = io_lib:format("~s", [ Report ] ),
				yaws_api:stream_process_deliver(Sock, SendString),
				rec_loop( Sock, YawsPid );
			finish ->
				io:fwrite( "report finished~n" ),
				yaws_api:stream_process_end(closed, YawsPid),
				io:fwrite( "report finished stream_process_end~n" ),
				exit(normal);
			Other ->
				io:fwrite( "receive other: ~p~n", [ Other ] ),
				{ html, "error" }
		after 10000000 ->
			{ html, "timeout" }
		end.
</erl>
